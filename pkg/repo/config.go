package repo

import (
	"context"
	"fmt"

	"github.com/giantswarm/microerror"
	"github.com/google/go-github/v43/github"
	"sigs.k8s.io/yaml"

	"github.com/giantswarm/capi-bootstrap/pkg/git"
)

const (
	owner             = "giantswarm"
	installationsRepo = "installations"
	configRepo        = "config"
	fleetRepo         = "management-clusters-fleet"
)

func New(config Config) (*Service, error) {
	return &Service{
		gitHubClient: config.GitHubClient,

		accountEngineer:       config.AccountEngineer,
		baseDomain:            config.BaseDomain,
		customer:              config.Customer,
		managementClusterName: config.ManagementClusterName,
		pipeline:              config.Pipeline,
		provider:              config.Provider,
	}, nil
}

func appCollectionRepo(provider string) string {
	return fmt.Sprintf("%s-app-collection", provider)
}

func (s *Service) buildConfigEntries() ([]*github.TreeEntry, error) {
	return nil, nil
}

func (s *Service) buildFleetEntries() ([]*github.TreeEntry, error) {
	return nil, nil
}

func (s *Service) buildAppCollectionEntries() ([]*github.TreeEntry, error) {
	return nil, nil
}

func (s *Service) buildInstallationsEntries() ([]*github.TreeEntry, error) {
	var entries []*github.TreeEntry

	{
		filePath := fmt.Sprintf("%s/cluster.yaml", s.managementClusterName)
		clusterDefinition := ClusterDefinition{
			Base:            s.baseDomain,
			Codename:        s.managementClusterName,
			Customer:        s.customer,
			AccountEngineer: s.accountEngineer,
			Pipeline:        s.pipeline,
			Provider:        s.provider,
		}
		content, err := yaml.Marshal(clusterDefinition)
		if err != nil {
			return nil, err
		}
		entries = append(entries, &github.TreeEntry{
			Path:    github.String(filePath),
			Type:    github.String("blob"),
			Content: github.String(string(content)),
			Mode:    github.String("100644"),
		})
	}

	appCatalogValues := AppCatalogValues{
		AppCatalog: AppCatalog{
			Config: AppCatalogConfig{
				ConfigMap: AppCatalogConfigConfigMap{
					Values: AppCatalogConfigConfigMapValues{
						BaseDomain:        s.baseDomain,
						ManagementCluster: s.managementClusterName,
						Provider:          s.provider,
					},
				},
			},
		},
	}
	appCatalogValuesYAML, err := yaml.Marshal(appCatalogValues)
	if err != nil {
		return nil, err
	}

	for _, catalog := range []string{"cluster", "cluster-test", "default", "default-test"} {
		filePath := fmt.Sprintf("%s/appcatalog/%s-appcatalog-values.yaml", s.managementClusterName, catalog)
		entries = append(entries, &github.TreeEntry{
			Path:    github.String(filePath),
			Type:    github.String("blob"),
			Content: github.String(string(appCatalogValuesYAML)),
			Mode:    github.String("100644"),
		})
	}

	return entries, nil
}

func (s *Service) EnsureCreated(ctx context.Context) error {
	for _, step := range []func(ctx context.Context) error{
		s.ensureInstallationsCreated,
		s.ensureConfigCreated,
		s.ensureAppCollectionCreated,
		s.ensureFleetCreated,
	} {
		err := step(ctx)
		if err != nil {
			return microerror.Mask(err)
		}
	}

	return nil
}

func (s *Service) EnsureDeleted(ctx context.Context) error {
	for _, step := range []func(ctx context.Context) error{
		s.ensureInstallationsDeleted,
		s.ensureConfigDeleted,
		s.ensureAppCollectionDeleted,
		s.ensureFleetDeleted,
	} {
		err := step(ctx)
		if err != nil {
			return microerror.Mask(err)
		}
	}

	return nil
}

func (s *Service) branchName(repo, clusterName string) string {
	return fmt.Sprintf("%s_auto_config", clusterName)
}

func (s *Service) ensureInstallationsCreated(ctx context.Context) error {
	branchName := s.branchName(installationsRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  installationsRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildInstallationsEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureConfigCreated(ctx context.Context) error {
	branchName := s.branchName(configRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  configRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildConfigEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureAppCollectionCreated(ctx context.Context) error {
	branchName := s.branchName(appCollectionRepo(s.provider), s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  appCollectionRepo(s.provider),

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildAppCollectionEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureFleetCreated(ctx context.Context) error {
	branchName := s.branchName(fleetRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  fleetRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildFleetEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureInstallationsDeleted(ctx context.Context) error {
	branchName := s.branchName(installationsRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  installationsRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildInstallationsEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureConfigDeleted(ctx context.Context) error {
	branchName := s.branchName(configRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  configRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildConfigEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureAppCollectionDeleted(ctx context.Context) error {
	branchName := s.branchName(appCollectionRepo(s.provider), s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  appCollectionRepo(s.provider),

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildAppCollectionEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}

func (s *Service) ensureFleetDeleted(ctx context.Context) error {
	branchName := s.branchName(fleetRepo, s.managementClusterName)
	client, err := git.New(git.Config{
		GitHubClient: s.gitHubClient,

		Owner: owner,
		Repo:  fleetRepo,

		BranchName: branchName,
		CommitAuthor: github.CommitAuthor{
			Name:  github.String("capi-bootstrap"),
			Email: github.String("capi-bootstrap@giantswarm.io"),
		},
		CommitTemplate: github.Commit{
			Message: github.String("bootstrap " + s.managementClusterName),
		},
	})
	if err != nil {
		return microerror.Mask(err)
	}

	entries, err := s.buildFleetEntries()
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.PushCommit(ctx, entries)
	if err != nil {
		return microerror.Mask(err)
	}

	_, err = client.CreateOrUpdatePullRequest(ctx, github.NewPullRequest{
		Body:                github.String("PR generated by capi-bootstrap"),
		Draft:               github.Bool(false),
		MaintainerCanModify: github.Bool(true),
		Title:               github.String("Bootstrap " + s.managementClusterName),
	})
	return microerror.Mask(err)
}
